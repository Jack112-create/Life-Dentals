@login_required(login_url='login')
def createBooking(request):

    """
    Users are prompted with booking form,
    allowing them to choose a time,
    date and treatment for their booking.
    """

    user = request.user

    today_date = datetime.datetime.now().date()

    bookings = Booking.objects.all()
    booked_times = []

    for booking in bookings:
        if booking.booking_date == today_date:
            booked_times.append(booking.booking_time)

    try:
        bookings = Booking.objects.get(user=user)
        return redirect('booking')
    except:
        pass

    form = BookingForm()

    if request.method == 'POST':
        form = BookingForm(request.POST)

        # Get user selected time and date for booking
        selected_time = request.POST['booking_time']
        selected_date = request.POST['booking_date']

        # Check if the form data is valid
        if form.is_valid():
            booking = form.save(commit=False)
            # Assign the user with the booking
            booking.user = request.user
            booking.save()
            messages.success(request, 'Booking Successful!')
            return redirect('booking')

    context = {
        'form': form,
        'booked_times': booked_times,
        'today_date': today_date,
        'past_times': get_past_times()
    }

    return render(request, 'booking/create-booking.html', context)


def createBookinghtmx(request):

    """
    Handles htmx request to allow
    dynamic time updates when user
    selects a date for their booking.
    """

    if request.htmx:
        form = BookingForm()

        date = request.POST['booking_date']

        past_times = ''

        today_date = datetime.datetime.now().date()

        treatment = request.POST['treatments']

        bookings = Booking.objects.filter(booking_date=date)
        booked_times = []

        for slot in bookings:
            booked_times.append(slot.booking_time)

        if str(today_date) == date:
            past_times = get_past_times()
            

        context = {
            'treatment': treatment,
            'times': booked_times,
            'date': date,
            'form': form,
            'today_date': today_date,
            'past_times': past_times
        }

        return render(request, 'booking/snippet/booking-snippet.html', context)




def get_past_times():
    now = datetime.datetime.now().strftime("%H:%M:%S")
    now_time_object = datetime.datetime.strptime(now, "%H:%M:%S").time()
    
    db_times = Booking.TIMESLOT_LIST

    start_time = []

    for slot in db_times:
        split_slot = slot[0].replace(' ', '-').split('-')
        start_time.append(split_slot[0])

    past_times = []

    for i in range(len(start_time)):
        slot_time_object = datetime.datetime.strptime(start_time[i], "%H:%M").time()
        if now_time_object > slot_time_object:
            past_times.append(db_times[i][0])
    
    return past_times